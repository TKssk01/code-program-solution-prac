/*
 * あなたは、定期購読で購入している商品が N 種類あり、商品ごとに購入頻度と価格が設定されています。これらの商品の届ける頻度は週単位です。

あなたが利用している定期購読サービスでは、同時に届けられる商品の種類数に応じて割引があり、2 種類同時に届けられる場合は10%引き、3 種類以上同時に届けられる場合は15%引きとなります。

あなたは、M 週後までに合計いくら払うことになるのか興味を持ちました。N 種類の商品の購入頻度と価格が与えられるので、1 週目に全ての商品の定期購入があったとき、M 週目までの間にいくら払うことになるかを計算してください。

入力例 1 の場合、次の図のようになります。

図1

1 週目と 9 週目に 3 種類以上の商品を届けられるので、15% 引きとなり、5 週目と 7 週目に 2 種類の商品が同時に届けられるので 10% 引きとなります。10 週目までに支払う金額の合計は 47870 なので、47870 と出力します。
評価ポイント
10回のテストケースで、正答率、実行速度、メモリ消費量をはかり得点が決まります。
より早い解答時間で提出したほうが得点が高くなります。
複数のテストケースで正しい出力がされるか評価（+50点）
解答までの速さ評価（+50点）
入力される値
入力は以下のフォーマットで与えられます。

N M
f_1 p_1
...
f_N p_N
・1 行目に定期購入している商品の種類 N と、何週間後までの金額を計算するかを表す整数 M がこの順に半角スペース区切りで与えられます。
・続く N 行の i 行目 (1 ≦ i ≦ H) には、i 番目の商品の購入頻度を表す整数 f_i と、価格 p_i がこの順に半角スペース区切りで与えられます。
・入力は合計で 1 + N 行からなり、入力値最終行の末尾に改行が 1 つ入ります。

それぞれの値は文字列で標準入力から渡されます。標準入力からの値取得方法はこちらをご確認ください
期待する出力
1 週目に全ての商品の定期購入があったとき、M 週目までの間に合計いくら支払うことになるかを出力してください。

末尾に改行を入れ、余計な文字、空行を含んではいけません。
条件
すべてのテストケースにおいて、以下の条件をみたします。

・2 ≦ N ≦ 100
・10 ≦ M ≦ 100
・1 ≦ i ≦ N に対し、
　・1 ≦ f_i ≦ 16
　・100 ≦ p_i ≦ 100,000
　・p_i は 100 の倍数
入力例1
4 10
2 2000
3 5000
4 1200
8 10000
出力例1
47870
入力例2
3 100
1 1000
2 1000
3 1000
出力例2
166350

 */


 import java.util.*;  // 必要なクラスをインポート

 public class Main {
     public static void main(String[] args) {
         Scanner sc = new Scanner(System.in);  // 標準入力からデータを読み取るためのScannerオブジェクトを作成
         
         int N = sc.nextInt(); // 商品の種類数を読み取る
         int M = sc.nextInt(); // 計算対象の週数を読み取る
         
         // 商品ごとの購入頻度と価格を保存する配列を作成
         int[] frequencies = new int[N]; // 各商品の購入頻度を保存する配列
         int[] prices = new int[N];      // 各商品の価格を保存する配列
         
         // 各商品の購入頻度と価格を読み取って配列に保存
         for (int i = 0; i < N; i++) {
             frequencies[i] = sc.nextInt(); // i番目の商品購入頻度を保存
             prices[i] = sc.nextInt();      // i番目の商品価格を保存
         }
         
         // 合計費用を保持する変数
         int totalCost = 0;  // 全週にわたる合計費用を格納する変数
 
         // 各週ごとに配送される商品数と費用を計算
         for (int week = 1; week <= M; week++) {  // 1週目からM週目までループ
             int cost = 0;           // その週の合計費用を格納する変数
             int itemsDelivered = 0;  // その週に配送される商品の種類数をカウントする変数
             
             // 週に配達される商品の数とその合計費用を計算
             for (int i = 0; i < N; i++) {  // 各商品を順にチェック
                 if (week % frequencies[i] == 0) {  // この商品が今週届くかどうかを判定
                     cost += prices[i];            // 届く場合、その商品の価格を合計費用に加算
                     itemsDelivered++;             // 配送される商品の種類数を1増加
                 }
             }
             
             // 割引の適用
             if (itemsDelivered >= 3) {         // 3種類以上の商品の同時配送なら
                 cost = (int)(cost * 0.85);     // 15%引きを適用
             } else if (itemsDelivered == 2) {  // 2種類の商品が同時配送なら
                 cost = (int)(cost * 0.90);     // 10%引きを適用
             }
             
             // 合計費用に追加
             totalCost += cost;  // 今週の費用を全体の合計費用に加算
         }
         
         // 結果を出力
         System.out.println(totalCost);  // 合計費用を標準出力に出力
         sc.close();  // Scannerを閉じる
     }
 }
 