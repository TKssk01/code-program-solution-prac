def rob(nums):
    # 特別なケース: 家が1軒しかない場合、その家の金額が最大
    if len(nums) == 1:
        return nums[0]    
    # dp配列の初期化（各家までの最大金額を保持する配列）
    dp = [0] * len(nums)
    # 最初の家を襲った場合の最大金額を設定
    dp[0] = nums[0]
    # 最初の2軒目までの最大金額を設定（どちらか多い方）
    dp[1] = max(nums[0], nums[1])
    # 3軒目以降の家について、DPテーブルを更新
    for i in range(2, len(nums)):
        # 現在の家を襲う場合と襲わない場合の最大値を計算してDPテーブルを更新
        dp[i] = max(dp[i-1], dp[i-2] + nums[i])
    # 最後の家までの最大金額を返す
    return dp[-1]
# テストケース1: 1, 3番目の家を襲うと最大金額は4になる
print(rob([1, 2, 3, 1]))  # 出力: 4
# テストケース2: 1, 3, 5番目の家を襲うと最大金額は12になる
print(rob([2, 7, 9, 3, 1]))  # 出力: 12
