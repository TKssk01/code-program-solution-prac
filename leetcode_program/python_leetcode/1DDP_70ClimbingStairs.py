class Solution:
    def climbStairs(self, n: int) -> int:
        # nが0の場合のベースケース: 0段目にいる方法は1通り
        if n == 0:
            return 1
        # nが1の場合のベースケース: 1段目に到達する方法は1通り
        elif n == 1:
            return 1
        # dp配列の初期化: 長さn+1のリストを作成し、すべての要素を0で初期化
        dp = [0] * (n + 1)
        # dp[0]を1に設定: 0段目にいる方法は1通り
        dp[0] = 1
        # dp[1]を1に設定: 1段目に到達する方法は1通り
        dp[1] = 1
        # 2段目からn段目までの各段に対して方法の数を計算
        for i in range(2, n + 1):
            # dp[i]をdp[i-1] + dp[i-2]の値で更新
            # これはi段目に到達するには、i-1段目から1段登る方法と
            # i-2段目から2段登る方法があるため
            dp[i] = dp[i-1] + dp[i-2]
        # 最後にn段目に到達する方法の数を返す
        return dp[n]